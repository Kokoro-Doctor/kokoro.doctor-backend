AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: SAM Template for API Gateway and Lambda Functions.

Resources:
  ## S3 Bucket
  MedilockerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kokoro-medilocker

  DoctorDocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kokoro-doctor-documents

  ## DynamoDB Table
  # Users Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Doctors Table
  DoctorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Doctors
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ## DynamoDB Table for Chat History
  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatHistory
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S # Partition Key (String)
        - AttributeName: timestamp
          AttributeType: N # Sort Key (Number, for efficient sorting)
      KeySchema:
        - AttributeName: email
          KeyType: HASH # Partition Key
        - AttributeName: timestamp
          KeyType: RANGE # Sort Key
      BillingMode: PAY_PER_REQUEST

  ## DynamoDB Table for Payments
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PaymentsTable
      AttributeDefinitions:
        - AttributeName: payment_id
          AttributeType: S # String (Partition Key)
      KeySchema:
        - AttributeName: payment_id
          KeyType: HASH # Partition Key
      BillingMode: PAY_PER_REQUEST

  ## IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"

  ## Lambda Functions
  LoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LoginLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20 # Increase timeout in seconds
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./login/
      Environment:
        Variables:
          DYNAMODB_TABLE: "Users" # Replace with actual table name
          SECRET_KEY: "your-secret-key" # Replace with a strong, secure key
          ALGORITHM: "HS256" # Algorithm used for JWT encoding
          ACCESS_TOKEN_EXPIRE_MINUTES: "60" # Token expiry time in minutes

  SignupLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignupLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20 # Increase timeout in seconds
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./signup/
      Environment:
        Variables:
          DYNAMODB_TABLE: "Users"

  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./auth
      Environment:
        Variables:
          USERS_TABLE: "Users" # DynamoDB table for user authentication
          DOCTORS_TABLE: "Doctors" # DynamoDB table for doctor information

  DoctorsServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DoctorsServiceLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20 # Increase timeout in seconds
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./doctorsService/
      Environment:
        Variables:
          USERS_TABLE: "Users" # DynamoDB table for user information
          DOCTORS_TABLE: "Doctors" # DynamoDB table for doctor information
          S3_BUCKET: kokoro-doctor-documents # S3 bucket for storing doctor documents

  ChatLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20 # Increase timeout in seconds
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./chat/
      Environment:
        Variables:
          DYNAMODB_TABLE: "ChatHistory" #DynamoDB table use for chat history
          OLLAMA_API: "https://kokoro.doctor/ollama" # Replace with the actual Ollama API endpoint

  ProcessPaymentLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessPaymentLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./payment/ # Ensure your process_payment.py file is in this folder
      Environment:
        Variables:
          RAZORPAY_KEY_ID: "rzp_test_sEjmsGQignIpko"
          RAZORPAY_KEY_SECRET: "qWJOsXCbO8apl69Qc1KEgP5x"
          DYNAMODB_TABLE_NAME: "PaymentsTable"

  MediLockerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MediLockerLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: ./medilocker/
      Environment:
        Variables:
          S3_BUCKET: kokoro-medilocker

  ## API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: KokoroServiceAPI
        paths:
          /login:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
              responses:
                default:
                  statusCode: 200
                  headers:
                    Access-Control-Allow-Origin: "'https://kokoro.doctor'"

          /signup:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignupLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
              responses:
                default:
                  statusCode: 200
                  headers:
                    Access-Control-Allow-Origin: "'https://kokoro.doctor'"

          /auth/{proxy+}:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

          /doctorsService/{proxy+}:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DoctorsServiceLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

          /chat:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

          /process-payment:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessPaymentLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

          /medilocker/{proxy+}:
            options:
              responses:
                "200":
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'https://kokoro.doctor'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Authorization, Content-Type'"
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MediLockerLambda.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

  ## Lambda Permissions
  LoginLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LoginLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/login"

  SignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SignupLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/signup"

  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/auth/*"

  DoctorsServiceLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DoctorsServiceLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/doctorsService/*"

  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/chat"

  ProcessPaymentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProcessPaymentLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/process-payment"

  MediLockerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MediLockerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/medilocker/*"
