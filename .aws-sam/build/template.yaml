AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for API Gateway and Lambda Functions.
Resources:
  MedilockerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kokoro-medilocker
  DoctorDocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kokoro-doctor-documents
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  DoctorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Doctors
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  AuthTokensTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AuthTokensTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      - AttributeName: purpose
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      - AttributeName: purpose
        KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  DoctorAvailabilityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DoctorAvailabilityTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
  DoctorBookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DoctorBookingsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: user_id
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: GSI_UserBookings
        KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatHistory
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      - AttributeName: timestamp
        AttributeType: N
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      - AttributeName: timestamp
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PaymentsTable
      AttributeDefinitions:
      - AttributeName: payment_id
        AttributeType: S
      KeySchema:
      - AttributeName: payment_id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: '*'
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:*
            Resource: '*'
  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      CodeUri: AuthLambda
      Environment:
        Variables:
          USERS_TABLE: Users
          DOCTORS_TABLE: Doctors
          AUTH_TOKENS_TABLE: AuthTokensTable
          BREVO_SMTP_USER: 91f88b001@smtp-brevo.com
          BREVO_SMTP_KEY: PzamcykGpK4fEXwT
          BREVO_SMTP_SERVER: smtp-relay.brevo.com
          BREVO_SMTP_PORT: '587'
    Metadata:
      SamResourceId: AuthLambda
  DoctorsServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DoctorsServiceLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      CodeUri: DoctorsServiceLambda
      Environment:
        Variables:
          USERS_TABLE: Users
          DOCTORS_TABLE: Doctors
          DOCTOR_AVAILABILITY_TABLE: DoctorAvailabilityTable
          S3_BUCKET: kokoro-doctor-documents
    Metadata:
      SamResourceId: DoctorsServiceLambda
  DoctorBookingsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DoctorBookingsLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      CodeUri: DoctorBookingsLambda
      Environment:
        Variables:
          DOCTOR_AVAILABILITY_TABLE: DoctorAvailabilityTable
          DOCTOR_BOOKINGS_TABLE: DoctorBookingsTable
    Metadata:
      SamResourceId: DoctorBookingsLambda
  ChatLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      CodeUri: ChatLambda
      Environment:
        Variables:
          DYNAMODB_TABLE: ChatHistory
          OLLAMA_API: https://kokoro.doctor/ollama
          RAG_SERVER_URL: http://13.203.1.165:8000/rag
    Metadata:
      SamResourceId: ChatLambda
  ProcessPaymentLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessPaymentLambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      CodeUri: ProcessPaymentLambda
      Environment:
        Variables:
          RAZORPAY_KEY_ID: rzp_test_sEjmsGQignIpko
          RAZORPAY_KEY_SECRET: qWJOsXCbO8apl69Qc1KEgP5x
          DYNAMODB_TABLE_NAME: PaymentsTable
    Metadata:
      SamResourceId: ProcessPaymentLambda
  MediLockerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MediLockerLambda
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      CodeUri: MediLockerLambda
      Environment:
        Variables:
          S3_BUCKET: kokoro-medilocker
    Metadata:
      SamResourceId: MediLockerLambda
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: KokoroServiceAPI
        paths:
          /auth/{proxy+}:
            options:
              responses:
                '200':
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,
                        POST, PUT, DELETE, OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,
                        Content-Type'''
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /doctorsService/{proxy+}:
            options:
              responses:
                '200':
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,
                        POST, OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,
                        Content-Type'''
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DoctorsServiceLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /doctorBookings/{proxy+}:
            options:
              responses:
                '200':
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,
                        POST, PUT, DELETE, OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,
                        Content-Type'''
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DoctorBookingsLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /chat:
            options:
              responses:
                '200':
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,
                        OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /process-payment:
            options:
              responses:
                '200':
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,
                        OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessPaymentLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
          /medilocker/{proxy+}:
            options:
              responses:
                '200':
                  description: CORS support
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,
                        POST, PUT, DELETE, OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,
                        Content-Type'''
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MediLockerLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: AuthLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/auth/*
  DoctorsServiceLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DoctorsServiceLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/doctorsService/*
  DoctorBookingsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DoctorBookingsLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/doctorBookings/*
  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ChatLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/chat
  ProcessPaymentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ProcessPaymentLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/process-payment
  MediLockerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: MediLockerLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/medilocker/*
